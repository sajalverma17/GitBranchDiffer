name: buildPublish

# Release steps: 
# On 'master' branch, create git tag with pattern: v{Major}.{Minor}.{Patch}
# To publish release: git push origin master v{Major}.{Minor}.{Patch}

on: 
  push:    
    tags:
      - 'v*.*.*'
  
jobs:

  build:

    runs-on: windows-2022

    env:
      Build_Version: '0.0.0'                                      # Must be updated by parsing version from tag name
      Solution_Name: src\GitBranchDiffer.sln                        
      Build_Configuration: Release
      Build_Platform: 'Any CPU'
      VSIX_Path: deploy\*.vsix
      GhRelease_VSIX_Path: deploy\GithubRelease.zip               # Archive containing VSIXs zipped into it, only for upload to Github Release

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    # Install the .NET Core workload, probably not needed
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    # Determine build version, then write to Github Actions Environment
    - name: Determine version number
      shell: powershell
      run: 
        |
        $version = .\build\VersionParser.ps1
        echo "Build_Version=$version" >> $env:GITHUB_ENV

    - name: Verify Build_Version
      if: ${{ env.Build_Version == '0.0.0' }}
      uses: actions/github-script@v3
      with:
        script: |
                core.setFailed('Build_Version env variable not set')    
                
    # Create a Github Release from latest Tag in 'master' branch. 
    - name: Create Github Release
      id: create_gh_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Update 'Release Notes' URL in extension manifests to Github Release URL
    - name: Update Release Notes URL in extension manifests
      shell: powershell
      run: .\build\VersionInfoURLUpdater.ps1 ${{ steps.create_gh_release.outputs.url }}

    # Update product version in extension manifests
    - name: Update Version Number in extension manifests
      shell: powershell
      run: .\build\VersionUpdater.ps1 $env:Build_Version

    # Restore the solution
    - name: Restore GitBranchDiffer
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Build_Configuration /v:m

    # Build the solution
    - name: Build GitBranchDiffer
      run: msbuild $env:Solution_Name /p:Configuration=$env:Build_Configuration /p:Platform=$env:Build_Platform /v:m

    # Run tests
    - name: Test GitBranchDiffer
      run: dotnet test tests\BranchDiffer.Git.Tests\BranchDiffer.Git.Tests.csproj

    # Zip VSIXs to upload them as artifact in Github Release
    - name: Zip VSIXs for Github Release
      shell: powershell
      run: Compress-Archive -Path $env:VSIX_Path -DestinationPath $env:GhRelease_VSIX_Path

    # Upload VSIXs ZIP to the Github Release
    - name: Upload artifact as Github Release Asset
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_gh_release.outputs.upload_url }} 
        asset_path: ${{ env.GhRelease_VSIX_Path }}
        asset_name: GitBranchDiffer.zip
        asset_content_type: application/zip

    # Upload the deploy folder as artifact. This contains the built VSIX packages, PublishManifest and Marketplace readme needed in publish job
    - name: Upload artifacts to workflow
      uses: actions/upload-artifact@v2
      with:
        name: PublishArtifacts
        path: deploy
        if-no-files-found: error
  
  publish-2019:
    
    runs-on: windows-2022
    needs: build
    
    env:
      Publisher_Name: SajalVerma
      PAT: ${{ secrets.VS_MARKETPLACE_ACCESS_TOKEN }}
      VsToolsPath: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VSSDK\VisualStudioIntegration\Tools\Bin\'      
      VSIX_Path: .\artifacts\GitBranchDiffer2019.vsix
      PublishManifest_Path: .\artifacts\PublishManifest2019.json

    steps:

        # Download the build artifact to artifacts folder in 'artifacts' directory
      - name: Download the build artifact
        uses: actions/download-artifact@v2
        with:
            name: PublishArtifacts
            path: .\artifacts

      - name: View artifacts directory
        shell: powershell
        run: dir .\artifacts

      - name: Login to marketplace
        shell : powershell
        run: |
          $vsixPublisherTool = '${{ env.VsToolsPath }}' + 'VsixPublisher.exe'
          & $vsixPublisherTool login -publisherName $env:Publisher_Name -personalAccessToken $env:PAT
      
      - name: Publish to marketplace
        shell: powershell
        run: |
             $vsixPublisherTool = '${{ env.VsToolsPath }}' + 'VsixPublisher.exe'
             $payloadVSIX = '${{ env.VSIX_Path }}'
             $publishManifest = '${{ env.PublishManifest_Path }}'
             # & $vsixPublisherTool publish -payload $payloadVSIX -publishManifest $publishManifest
          
      - name: Logout of marketplace
        shell : powershell
        run: |
          $vsixPublisherTool = '${{ env.VsToolsPath }}' + 'VsixPublisher.exe'
          & $vsixPublisherTool logout -publisherName $env:Publisher_Name -ignoreMissingPublisher

  publish:
    
    runs-on: windows-2022
    needs: build
    
    env:
      Publisher_Name: SajalVerma
      PAT: ${{ secrets.VS_MARKETPLACE_ACCESS_TOKEN }}
      VsToolsPath: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VSSDK\VisualStudioIntegration\Tools\Bin\'      
      VSIX_Path: .\artifacts\GitBranchDiffer.vsix
      PublishManifest_Path: .\artifacts\PublishManifest.json

    steps:

        # Download the build artifact to artifacts folder in 'artifacts' directory
      - name: Download the build artifact
        uses: actions/download-artifact@v2
        with:
            name: PublishArtifacts
            path: .\artifacts

      - name: View artifacts directory
        shell: powershell
        run: dir .\artifacts

      - name: Login to marketplace
        shell : powershell
        run: |
          $vsixPublisherTool = '${{ env.VsToolsPath }}' + 'VsixPublisher.exe'
          & $vsixPublisherTool login -publisherName $env:Publisher_Name -personalAccessToken $env:PAT
      
      - name: Publish to marketplace
        shell: powershell
        run: |
             $vsixPublisherTool = '${{ env.VsToolsPath }}' + 'VsixPublisher.exe'
             $payloadVSIX = '${{ env.VSIX_Path }}'
             $publishManifest = '${{ env.PublishManifest_Path }}'
             # & $vsixPublisherTool publish -payload $payloadVSIX -publishManifest $publishManifest
          
      - name: Logout of marketplace
        shell : powershell
        run: |
          $vsixPublisherTool = '${{ env.VsToolsPath }}' + 'VsixPublisher.exe'
          & $vsixPublisherTool logout -publisherName $env:Publisher_Name -ignoreMissingPublisher